name: Test e2e cluster setup

on:
  push:
  pull_request:
    branches: [master]

jobs:
  local-e2e-setup:
    name: e2e setup locally
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Start Kind
        run: "./kindcluster.sh start --cluster=clusters/e2e"

      - name: Verify that UI is up and running
        run: |
          for i in {1..20}; do
            curl --fail http://localhost:3300 --output /dev/null --silent && break
            sleep 5
            echo $i
          done

      - name: Verify that postgresql is up and running
        run: |
          for i in {1..20}; do
            pg_isready -h localhost -p 3002 && break
            sleep 5
            echo $i
          done

      - name: Verify that hasura is up and running
        run: |
          for i in {1..20}; do
            curl --fail http://localhost:3300/graphql/console --output /dev/null --silent && break
            sleep 5
            echo $i
          done

      - name: Stop Kind
        run: "./kindcluster.sh stop"

  remote-e2e-setup:
    name: e2e setup remotely
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        include:
          # no overwrites
          - frontend-docker-image: ""
            hasura-docker-image: ""
          # overwrite all
          - frontend-docker-image: "hsldevcom/jore4-ui:latest"
            hasura-docker-image: "hsldevcom/jore4-hasura:latest"
          # overwrite some
          - frontend-docker-image: "hsldevcom/jore4-ui:latest"
            hasura-docker-image: ""

    steps:
      # note that we don't checkout code in this job to make sure that the script works from an empty workspace!
      - name: Verifying that current workspace is empty
        run: '[ -z "$(ls -A)" ]'

      - name: Extract branch name to env variable
        run: |
          # In pull requests
          BRANCH_NAME="${GITHUB_HEAD_REF}"
          [[ ${BRANCH_NAME} == "" ]] && {
            # In branch pushes
            BRANCH_NAME="$(echo "${GITHUB_REF}" | cut -d '/' -f 3-)"
          }
          echo "BRANCH_NAME=${BRANCH_NAME}" >> "${GITHUB_ENV}"

      - name: Setup e2e cluster with the remote script
        env:
          # change some docker images to use a different version
          FRONTEND_DOCKER_IMAGE: ${{ matrix.frontend-docker-image }}
          HASURA_DOCKER_IMAGE: ${{ matrix.hasura-docker-image }}
          # make sure we are testing the remotecluster.sh against the current branch
          E2E_SCRIPTS_VERSION: ${{ env.BRANCH_NAME }}
        run: "curl https://raw.githubusercontent.com/HSLdevcom/jore4-flux/${BRANCH_NAME}/remotecluster.sh | bash"

      - name: Verify that UI is up and running
        run: |
          for i in {1..20}; do
            curl --fail http://localhost:3300 --output /dev/null --silent && break
            sleep 5
            echo $i
          done

      - name: Verify that postgresql is up and running
        run: |
          for i in {1..20}; do
            pg_isready -h localhost -p 3002 && break
            sleep 5
            echo $i
          done

      - name: Verify that hasura is up and running
        run: |
          for i in {1..20}; do
            curl --fail http://localhost:3300/graphql/console --output /dev/null --silent && break
            sleep 5
            echo $i
          done

      - name: Testing that the correct version got deployed from frontend
        # if matrix.frontend-docker-image is defined should use that, otherwise use default
        run: |
          FRONTEND_DEPLOYED_VERSION=`kubectl get deployment jore4-frontend --namespace hsl-jore4 --output jsonpath='{.spec.template.spec.containers[0].image}'`
          if [[ "${{ matrix.frontend-docker-image }}" == "" ]]
          then
            [[ "$FRONTEND_DEPLOYED_VERSION" != "${{ matrix.frontend-docker-image }}" ]]
          else
            [[ "$FRONTEND_DEPLOYED_VERSION" == "${{ matrix.frontend-docker-image }}" ]]
          fi

      - name: Testing that the correct version got deployed from hasura
        # if matrix.hasura-docker-image is defined should use that, otherwise use default
        run: |
          HASURA_DEPLOYED_VERSION=`kubectl get deployment jore4-hasura --namespace hsl-jore4 --output jsonpath='{.spec.template.spec.containers[0].image}'`
          if [[ "${{ matrix.hasura-docker-image }}" == "" ]]
          then
            [[ "$HASURA_DEPLOYED_VERSION" != "${{ matrix.hasura-docker-image }}" ]]
          else
            [[ "$HASURA_DEPLOYED_VERSION" == "${{ matrix.hasura-docker-image }}" ]]
          fi

      - name: Stop Kind
        run: "curl https://raw.githubusercontent.com/HSLdevcom/jore4-flux/${BRANCH_NAME}/kindcluster.sh | bash -s -- stop"
