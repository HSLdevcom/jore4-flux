stage: e2e
fluxSyncEnabled: false
limitRanges:
  # github runners have limited CPU and memory
  memory:
    default: 512Mi
    defaultRequest: 128Mi
  cpu:
    default: 1
    defaultRequest: 0.05
ingress:
  type: nginx
  hostname: ""
  routes:
    # note that all these are rewritten to /$2 (so using the second regexp capture group without prefix)
    # note that these rules are evaluated in order, UI service is used as fallback for any unrecognized routes

    # note the (/|$) allows the url to terminate after "graphql" or continue with a "/"
    - path: /api/graphql(/|$)(.*)
      serviceName: hasura
      servicePort: 8080
    # note the (/|$) allows the url to terminate after "auth" or continue with a "/"
    - path: /api/auth(/|$)(.*)
      serviceName: auth
      servicePort: 8080
    # note the (/|$) allows the url to terminate after "mbtiles" or continue with a "/"
    - path: /api/mbtiles(/|$)(.*)
      serviceName: mbtiles
      servicePort: 8000
    # note the (/|$) allows the url to terminate after "mapmatching" or continue with a "/"
    - path: /api/mapmatching(/|$)(.*)
      serviceName: mapmatching
      servicePort: 8080
    # note the first () will be an empty capture group
    - path: /()(.*)
      serviceName: ui
      servicePort: 80
microServices:
  hasura:
    env:
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
    localSecrets:
      db-hostname: jore4-testdb
      db-name: jore4e2e
      db-username: dbhasura
      db-password: hasurapassword
      hasura-admin-secret: hasura
      db-auth-username: dbauth
      db-jore3importer-username: dbimporter
  auth:
    env:
      SELF_PUBLIC_BASE_URL: "http://localhost:3300"
      LOGINPAGE_URL: "http://localhost:3300"
      LOGOUTPAGE_URL: "http://localhost:3300"
      OIDC_PROVIDER_BASE_URL: "https://hslid-dev.t5.fi"
    secretMappings: ""
    localSecrets:
      oidc-client-id: "0838619941439007"
      oidc-client-secret: "9uV5p45F6IZQubCErBiquZYaL7Wm2AWM"
      db-hostname: jore4-testdb
      db-name: jore4e2e
      db-username: dbauth
      db-password: authpassword
  testdb:
    serviceName: "testdb"
    serviceType: "NodePort"
    dockerImage: "hsldevcom/jore4-postgres:azuredbmock-main--95833a388a10c2eec9d9dba104891a5a2fafdf5d"
    ports:
      - containerPort: 5432
        nodePort: 30432
        localPort: 6432
    env:
      SECRET_STORE_BASE_PATH: "/mnt/secrets-store"
      POSTGRES_DB: jore4e2e
      POSTGRES_USER: dbadmin
      POSTGRES_PASSWORD: adminpassword
    localSecrets:
      db-auth-username: dbauth
      db-auth-password: authpassword
      db-jore3importer-username: dbimporter
      db-jore3importer-password: importerpassword
      db-hasura-username: dbhasura
      db-hasura-password: hasurapassword
      db-hasura-name: jore4e2e
  mssqltestdb:
    serviceName: "mssqltestdb"
    serviceType: "NodePort"
    dockerImage: "hsldevcom/jore4-mssql-testdb:schema-only-main--c21d8964db33b16988114752cf085ca877a4a45e"
    ports:
      - containerPort: 1433
        nodePort: 30433
        localPort: 1433
    env:
      SA_PASSWORD: "P@ssw0rd"
    podSpec:
      resources:
        limits:
          # the default 512Mi memory limit is not enough for the dockerized mssql database
          memory: "1024Mi"
  jore3importer:
    serviceType: "NodePort"
    ports:
      - containerPort: 8080
        nodePort: 30434
        localPort: 3004
    localSecrets:
      source-db-hostname: jore4-mssqltestdb
      source-db-port: 1433
      source-db-database: jore3testdb
      source-db-username: "sa"
      source-db-password: "P@ssw0rd"
      destination-db-hostname: jore4-testdb
      destination-db-database: jore4e2e
      # destination-db-port defaults to 5432
      destination-db-username: dbimporter
      destination-db-password: importerpassword
  mapmatching:
    serviceType: "NodePort"
    ports:
      - containerPort: 8080
        nodePort: 30435
        localPort: 3005
    localSecrets:
      db-username: mapmatching
      db-password: password
  mapmatchingdb:
    serviceType: "NodePort"
    ports:
      - containerPort: 5432
        nodePort: 30436
        localPort: 6433
    localSecrets:
      postgres-user: mapmatching
      postgres-password: password
