---
version: "3.8"
services:
  auth:
    container_name: "auth"
    image: "hsldevcom/jore4-auth:dockerize--bf95d6d8b7bacfd6b990b2e9d55e4f6a1554879b"
    restart: "unless-stopped"
    networks:
      - jore4
    environment:
      API_PATH_PREFIX: ""
      API_PATH_PREFIX_PUBLIC: "/api/auth"
      LOGINPAGE_URL: "http://localhost:3301"
      LOGOUTPAGE_URL: "http://localhost:3301"
      OIDC_PROVIDER_BASE_URL: "https://hslid-dev.t5.fi"
      SECRET_STORE_BASE_PATH: "/run/secrets"
      SELF_PUBLIC_BASE_URL: "http://localhost:3301"
    ports:
      - "127.0.0.1:3200:8080"
    secrets:
      - oidc-client-id
      - oidc-client-secret

  hasura:
    container_name: "hasura"
    image: "hsldevcom/jore4-hasura:fix-metadata--613b29c2d4c6f0ef1cf6f258ab3071b780fa23bd"
    restart: "unless-stopped"
    networks:
      - jore4
    environment:
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_GRAPHQL_METADATA_DIR: "/hasura-metadata"
      HASURA_GRAPHQL_MIGRATIONS_DIR: "/hasura-migrations"
      HASURA_GRAPHQL_MIGRATIONS_SERVER_TIMEOUT: "60"
      SECRET_STORE_BASE_PATH: "/run/secrets"
    ports:
      - "127.0.0.1:3201:8080"
    secrets:
      - db-hostname
      - db-name
      - db-password
      - db-username
      - hasura-admin-secret

  testdb:
    container_name: "testdb"
    image: "postgis/postgis:12-3.1-alpine"
    restart: "unless-stopped"
    networks:
      - jore4
    environment:
      POSTGRES_DB: "jore4e2e"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_USER: "postgres"
    ports:
      - "127.0.0.1:6432:5432"

  ui:
    container_name: "ui"
    image: "hsldevcom/jore4-ui:fix-docker-css--72224fc7574d8fb4486b43d8abc6afcf1b7f14c6"
    restart: "unless-stopped"
    networks:
      - jore4
    ports:
      - "127.0.0.1:3302:80"

  proxy:
    container_name: proxy
    image: nginx:alpine
    restart: "unless-stopped"
    networks:
      - jore4
    ports:
      - 3301:80

    command: |
      sh -c "sh -s <<EOF
      cat > /etc/nginx/conf.d/default.conf <<'EOT'
        # based on https://gist.github.com/JarenGlover/d7ffab312ea756834218

        # \\$$ is used to escape dollar signs in docker-compose and then in bash

        # url rewriting: https://stackoverflow.com/questions/53353572/proxy-pass-cannot-have-uri-part-in-location-given-by-regular-expression/53354944

        server {
            listen 80 default_server;

        should use gomplate here

            location ~ /api/auth(/|\\$$)(.*) {
                # container expects api calls through / path
                # rewrite /api/auth(/|\\$$)(.*) /\\$$2 break;

                # requests to the API will be proxy_pass to the backend API infra
                # http://en.wikipedia.org/wiki/X-Forwarded-For
                proxy_set_header X-Forwarded-For \\$$proxy_add_x_forwarded_for;

                # pass some headers from the client to help with redirects
                proxy_set_header Host \\$$http_host;
                proxy_set_header Upgrade \\$$http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header X-Real-IP \\$$remote_addr;

                # setting the resolver to docker DNS (127.0.0.11) and upstream as a variable
                # will enable nginx not to crash in case service is not running
                # proxy_pass to backend /\\$$2 url
                resolver 127.0.0.11 valid=30s;
                set \\$$upstream_auth auth:8080;
                proxy_pass http://\\$$upstream_auth/\\$$2;
                proxy_redirect off;
            }

            location ~ /api/graphql(/|\\$$)(.*) {
                # container expects api calls through / path
                # rewrite ^/api/graphql/(.*) /\\$$1;

                # requests to the API will be proxy_pass to the backend API infra
                # read this -> http://en.wikipedia.org/wiki/X-Forwarded-For
                proxy_set_header X-Forwarded-For \\$$proxy_add_x_forwarded_for;

                # pass the host header from the client to help with redirects
                proxy_set_header Host \\$$http_host;
                proxy_set_header Upgrade \\$$http_upgrade;
                proxy_set_header Connection "upgrade";

                # stops nginx from doing something silly
                proxy_redirect off;

                # proxy_pass to backend
                resolver 127.0.0.11 valid=30s;
                set \\$$upstream_hasura hasura:8080;
                proxy_pass http://\\$$upstream_hasura/\\$$2;

                # send the IP address and remote server address for security
                proxy_set_header X-Real-IP \\$$remote_addr;
            }

            # non-API calls should be handled by UI
            location ~ ^/(?!api) {
                resolver 127.0.0.11 valid=30s;
                set \\$$upstream_ui ui:80;
                proxy_pass http://\\$$upstream_ui;
            }

            # fallback does not do anything
            location / {
            }
        }

      EOT
      cat /etc/nginx/conf.d/default.conf
      nginx -g 'daemon off;'
      EOF"

networks:
  jore4:

secrets:
  oidc-client-id:
    file: ./secrets/oidc-client-id
  oidc-client-secret:
    file: ./secrets/oidc-client-secret
  db-hostname:
    file: ./secrets/db-hostname
  db-name:
    file: ./secrets/db-name
  db-password:
    file: ./secrets/db-password
  db-username:
    file: ./secrets/db-username
  hasura-admin-secret:
    file: ./secrets/hasura-admin-secret
