---
version: "3.8"
services:
  auth:
    container_name: "auth"
    image: "hsldevcom/jore4-auth:dockerize--bf95d6d8b7bacfd6b990b2e9d55e4f6a1554879b"
    restart: "unless-stopped"
    networks:
      - jore4
    environment:
      API_PATH_PREFIX: ""
      API_PATH_PREFIX_PUBLIC: "/api/auth"
      LOGINPAGE_URL: "http://localhost:3300"
      LOGOUTPAGE_URL: "http://localhost:3300"
      OIDC_PROVIDER_BASE_URL: "https://hslid-dev.t5.fi"
      SECRET_STORE_BASE_PATH: "/run/secrets"
      SELF_PUBLIC_BASE_URL: "http://localhost:3300"
    ports:
      - "127.0.0.1:3200:8080"
    secrets:
      - oidc-client-id
      - oidc-client-secret

  hasura:
    container_name: "hasura"
    image: "hsldevcom/jore4-hasura:fix-metadata--613b29c2d4c6f0ef1cf6f258ab3071b780fa23bd"
    restart: "unless-stopped"
    networks:
      - jore4
    environment:
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_GRAPHQL_METADATA_DIR: "/hasura-metadata"
      HASURA_GRAPHQL_MIGRATIONS_DIR: "/hasura-migrations"
      HASURA_GRAPHQL_MIGRATIONS_SERVER_TIMEOUT: "60"
      SECRET_STORE_BASE_PATH: "/run/secrets"
    ports:
      - "127.0.0.1:3201:8080"
    secrets:
      - db-hostname
      - db-name
      - db-password
      - db-username
      - hasura-admin-secret

  testdb:
    container_name: "testdb"
    image: "postgis/postgis:12-3.1-alpine"
    restart: "unless-stopped"
    networks:
      - jore4
    environment:
      POSTGRES_DB: "jore4e2e"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_USER: "postgres"
    ports:
      - "127.0.0.1:6432:5432"

  ui:
    container_name: "ui"
    image: "hsldevcom/jore4-ui:fix-docker-css--72224fc7574d8fb4486b43d8abc6afcf1b7f14c6"
    restart: "unless-stopped"
    networks:
      - jore4
    ports:
      - "127.0.0.1:3302:80"

  proxy:
    container_name: proxy
    image: nginx:alpine
    restart: "unless-stopped"
    networks:
      - jore4
    ports:
      - 3301:80
    command: |
      sh -c 'sh -s <<EOF
        cat > /etc/nginx/conf.d/default.conf <<EON
          # based on https://gist.github.com/JarenGlover/d7ffab312ea756834218

          server {
              listen 80 default_server;
              listen [::]:80 default_server;

              location /api {
                  # container expects api calls through /api path
                  # rewrite ^/api/auth/(.*) /api/$$1;

                  # requests to the API will be proxy_pass to the backend API infra
                  # read this -> http://en.wikipedia.org/wiki/X-Forwarded-For
                  proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;

                  # pass the host header from the client to help with redirects
                  proxy_set_header Host $$http_host;

                  # stops nginx from doing something silly
                  proxy_redirect off;

                  # proxy_pass to backend
                  proxy_pass http://auth:8080;

                  # send the IP address and remote server address for security
                  proxy_set_header X-Real-IP $$remote_addr;
              }

              location / {
                  proxy_pass http://ui:80;
              }
          }

      EON
      nginx
      EOF'

networks:
  jore4:

secrets:
  oidc-client-id:
    file: ./secrets/oidc-client-id
  oidc-client-secret:
    file: ./secrets/oidc-client-secret
  db-hostname:
    file: ./secrets/db-hostname
  db-name:
    file: ./secrets/db-name
  db-password:
    file: ./secrets/db-password
  db-username:
    file: ./secrets/db-username
  hasura-admin-secret:
    file: ./secrets/hasura-admin-secret
